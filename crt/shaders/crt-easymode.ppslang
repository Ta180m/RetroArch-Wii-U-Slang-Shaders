#version 450

layout(push_constant)uniform Push
{
    float BRIGHT_BOOST;
    float DILATION;
    float GAMMA_INPUT;
    float GAMMA_OUTPUT;
    float MASK_SIZE;
    float MASK_STAGGER;
    float MASK_STRENGTH;
    float MASK_DOT_HEIGHT;
    float MASK_DOT_WIDTH;
    float SCANLINE_CUTOFF;
    float SCANLINE_BEAM_WIDTH_MAX;
    float SCANLINE_BEAM_WIDTH_MIN;
    float SCANLINE_BRIGHT_MAX;
    float SCANLINE_BRIGHT_MIN;
    float SCANLINE_STRENGTH;
    float SHARPNESS_H;
    float SHARPNESS_V;
} params;

#pragma parameterSHARPNESS_H¡0.50.01.00.05
#pragma parameterSHARPNESS_V¡1.00.01.00.05
#pragma parameterMASK_STRENGTH¡0.30.01.00.01
#pragma parameterMASK_DOT_WIDTH¡1.01.0100.01.0
#pragma parameterMASK_DOT_HEIGHT¡1.01.0100.01.0
#pragma parameterMASK_STAGGER¡0.00.0100.01.0
#pragma parameterMASK_SIZE¡1.01.0100.01.0
#pragma parameterSCANLINE_STRENGTH¡1.00.01.00.05
#pragma parameterSCANLINE_BEAM_WIDTH_MIN¡1.50.55.00.5
#pragma parameterSCANLINE_BEAM_WIDTH_MAX¡1.50.55.00.5
#pragma parameterSCANLINE_BRIGHT_MIN¡0.350.01.00.05
#pragma parameterSCANLINE_BRIGHT_MAX¡0.650.01.00.05
#pragma parameterSCANLINE_CUTOFF¡400.01.01000.01.0
#pragma parameterGAMMA_INPUT¡2.00.15.00.1
#pragma parameterGAMMA_OUTPUT¡1.80.15.00.1
#pragma parameterBRIGHT_BOOST¡1.21.02.00.01
#pragma parameterDILATION¡1.00.01.01.0

layout(std140, set = 0, binding = 0)uniform UBO
{
    mat4 MVP;
    vec4 OutputSize;
    vec4 OriginalSize;
    vec4 SourceSize;
} global;

#pragma stagevertex
layout(location = 0)in vec4 Position;
layout(location = 1)in vec2 TexCoord;
layout(location = 0)out vec2 vTexCoord;

void main()
{
    gl_Position = global . MVP * Position;
    vTexCoord = TexCoord;
}






























#pragma stagefragment
layout(location = 0)in vec2 vTexCoord;
layout(location = 0)out vec4 FragColor;
layout(set = 0, binding = 2)uniform sampler2D Source;









vec4 dilate(vec4 col)
{
    vec4 x = mix(vec4(1.0), col, params . DILATION);

    return col * x;
}

float curve_distance(float x, float sharp)
{







    float x_step = step(0.5, x);
    float curve = 0.5 - sqrt(0.25 -(x - x_step)*(x - x_step))* sign(0.5 - x);

    return mix(x, curve, sharp);
}

mat4x4 get_color_matrix(vec2 co, vec2 dx)
{
    return mat4x4(dilate(texture(Source, co - dx)), dilate(texture(Source, co)), dilate(texture(Source, co + dx)), dilate(texture(Source, co + 2.0 * dx)));
}

vec3 filter_lanczos(vec4 coeffs, mat4x4 color_matrix)
{
    vec4 col = color_matrix * coeffs;
    vec4 sample_min = min(color_matrix[1], color_matrix[2]);
    vec4 sample_max = max(color_matrix[1], color_matrix[2]);

    col = clamp(col, sample_min, sample_max);

    return col . rgb;
}


void main()
{
    vec2 dx = vec2(global . SourceSize . z, 0.0);
    vec2 dy = vec2(0.0, global . SourceSize . w);
    vec2 pix_co = vTexCoord * global . SourceSize . xy - vec2(0.5, 0.5);
    vec2 tex_co =(floor(pix_co)+ vec2(0.5, 0.5))* global . SourceSize . zw;
    vec2 dist = fract(pix_co);
    float curve_x;
    vec3 col, col2;


    curve_x = curve_distance(dist . x, params . SHARPNESS_H * params . SHARPNESS_H);

    vec4 coeffs = 3.141592653589 * vec4(1.0 + curve_x, curve_x, 1.0 - curve_x, 2.0 - curve_x);

    coeffs = max(abs(coeffs), 1e-5);
    coeffs = 2.0 * sin(coeffs)* sin(coeffs * 0.5)/(coeffs * coeffs);
    coeffs /= dot(coeffs, vec4(1.0));

    col = filter_lanczos(coeffs, get_color_matrix(tex_co, dx));
    col2 = filter_lanczos(coeffs, get_color_matrix(tex_co + dy, dx));







    col = mix(col, col2, curve_distance(dist . y, params . SHARPNESS_V));
    col = pow(col, vec3(params . GAMMA_INPUT /(params . DILATION + 1.0)));

    float luma = dot(vec3(0.2126, 0.7152, 0.0722), col);
    float bright =(max(col . r, max(col . g, col . b))+ luma)* 0.5;
    float scan_bright = clamp(bright, params . SCANLINE_BRIGHT_MIN, params . SCANLINE_BRIGHT_MAX);
    float scan_beam = clamp(bright * params . SCANLINE_BEAM_WIDTH_MAX, params . SCANLINE_BEAM_WIDTH_MIN, params . SCANLINE_BEAM_WIDTH_MAX);
    float scan_weight = 1.0 - pow(cos(vTexCoord . y * 2.0 * 3.141592653589 * global . SourceSize . y)* 0.5 + 0.5, scan_beam)* params . SCANLINE_STRENGTH;

    float mask = 1.0 - params . MASK_STRENGTH;
    vec2 mod_fac = floor(vTexCoord * global . OutputSize . xy * global . SourceSize . xy /(global . SourceSize . xy * vec2(params . MASK_SIZE, params . MASK_DOT_HEIGHT * params . MASK_SIZE)));
    int dot_no = int(mod((mod_fac . x + mod(mod_fac . y, 2.0)* params . MASK_STAGGER)/ params . MASK_DOT_WIDTH, 3.0));
    vec3 mask_weight;

    if(dot_no == 0)mask_weight = vec3(1.0, mask, mask);
    else if(dot_no == 1)mask_weight = vec3(mask, 1.0, mask);
    else mask_weight = vec3(mask, mask, 1.0);

    if(global . SourceSize . y >= params . SCANLINE_CUTOFF)
        scan_weight = 1.0;

    col2 = col . rgb;
    col *= vec3(scan_weight);
    col = mix(col, col2, scan_bright);
    col *= mask_weight;
    col = pow(col, vec3(1.0 / params . GAMMA_OUTPUT));

    FragColor = vec4(col * params . BRIGHT_BOOST, 1.0);
}
