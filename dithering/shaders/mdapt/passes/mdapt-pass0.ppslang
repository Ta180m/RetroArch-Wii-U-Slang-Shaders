#version 450









layout(push_constant)uniform Push
{
 vec4 SourceSize;
 vec4 OriginalSize;
 vec4 OutputSize;
 uint FrameCount;
 float MODE;
 float PWR;
} params;

#pragma parameterMODE¡0.00.01.01.0
#pragma parameterPWR¡2.00.010.00.1

layout(std140, set = 0, binding = 0)uniform UBO
{
 mat4 MVP;
} global;





float eq(vec3 A, vec3 B)
{
 vec3 diff = A - B;
 float ravg =(A . x + B . x)* 0.5;

 diff *= diff * vec3(2.0 + ravg, 4.0, 3.0 - ravg);

 return pow(smoothstep(3.0, 0.0, sqrt(diff . x + diff . y + diff . z)), params . PWR);
}

float and_(float a, float b, float c, float d, float e, float f){
 return min(a, min(b, min(c, min(d, min(e, f)))));
}

#pragma stagevertex
layout(location = 0)in vec4 Position;
layout(location = 1)in vec2 TexCoord;
layout(location = 0)out vec2 vTexCoord;

void main()
{
   gl_Position = global . MVP * Position;
   vTexCoord = TexCoord;
}

#pragma stagefragment
layout(location = 0)in vec2 vTexCoord;
layout(location = 0)out vec4 FragColor;
layout(set = 0, binding = 2)uniform sampler2D Source;

void main()
{






 vec3 C = texture(Source, vTexCoord + vec2((0.),(0.))* params . SourceSize . zw). xyz;
 vec3 L = texture(Source, vTexCoord + vec2((- 1.),(0.))* params . SourceSize . zw). xyz;
 vec3 R = texture(Source, vTexCoord + vec2((1.),(0.))* params . SourceSize . zw). xyz;
 vec3 U = texture(Source, vTexCoord + vec2((0.),(- 1.))* params . SourceSize . zw). xyz;
 vec3 D = texture(Source, vTexCoord + vec2((0.),(1.))* params . SourceSize . zw). xyz;


 vec3 res = vec3(0.0);

 if(params . MODE > 0.5){
  res . x = float((L == R)&&(C != L));
  res . y = float((U == D)&&(C != U));
  res . z = float(bool(res . x)&& bool(res . y)&&(L == U));
 }
 else {
  vec3 dCL = normalize(C - L), dCR = normalize(C - R), dCD = normalize(C - D), dCU = normalize(C - U);

  res . x = clamp(dot(dCL, dCR), 0.0, 1.0)* eq(L, R);
  res . y = clamp(dot(dCU, dCD), 0.0, 1.0)* eq(U, D);
  res . z = and_(res . x, res . y, clamp(dot(dCL, dCU), 0.0, 1.0)* eq(L, U), clamp(dot(dCL, dCD), 0.0, 1.0)* eq(L, D), clamp(dot(dCR, dCU), 0.0, 1.0)* eq(R, U), clamp(dot(dCR, dCD), 0.0, 1.0)* eq(R, D));
 }

   FragColor = vec4(res, 1.0);
}
