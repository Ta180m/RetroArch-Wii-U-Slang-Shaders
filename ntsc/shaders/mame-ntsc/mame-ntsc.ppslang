#version 450
#extension GL_GOOGLE_include_directive : enable
#line 1 "../../../slang-shaders/ntsc/shaders/mame-ntsc/mame-ntsc.slang"























layout(push_constant)uniform Push
{
 vec4 SourceSize;
 vec4 OriginalSize;
 vec4 OutputSize;
 uint FrameCount;
} params;

#line 1 "../../../slang-shaders/ntsc/shaders/mame-ntsc/constants.inc"

const vec4 Zero = vec4(0.0);
const vec4 Half = vec4(0.5);
const vec4 One = vec4(1.0);
const vec4 Two = vec4(2.0);
const vec3 Gray = vec3(0.3, 0.59, 0.11);
const float Pi = 3.1415926535;
const float Pi2 = 6.283185307;


const vec4 A = vec4(0.5);
const vec4 A2 = vec4(1.0);
const vec4 B = vec4(0.5);
const float P = 1.0;
const float CCFrequency = 3.59754545;
const float NotchUpperFrequency = 3.59754545 + 2.0;
const float NotchLowerFrequency = 3.59754545 - 2.0;
const float YFrequency = 6.0;
const float IFrequency = 1.2;
const float QFrequency = 0.6;
const float NotchHalfWidth = 2.0;
const float ScanTime = 52.6;
const float Pi2ScanTime = 6.283185307 * 52.6;
const float MaxC = 2.1183;
const vec4 YTransform = vec4(0.299, 0.587, 0.114, 0.0);
const vec4 ITransform = vec4(0.595716, - 0.274453, - 0.321263, 0.0);
const vec4 QTransform = vec4(0.211456, - 0.522591, 0.311135, 0.0);
const vec3 YIQ2R = vec3(1.0, 0.956, 0.621);
const vec3 YIQ2G = vec3(1.0, - 0.272, - 0.647);
const vec3 YIQ2B = vec3(1.0, - 1.106, 1.703);
const vec4 MinC = vec4(- 1.1183);
const vec4 CRange = vec4(3.2366);
const vec4 InvCRange = vec4(1.0 / 3.2366);
const float Pi2Length = Pi2 / 63.0;
const vec4 NotchOffset = vec4(0.0, 1.0, 2.0, 3.0);
const vec4 W = vec4(Pi2 * CCFrequency * ScanTime);


const vec3 RedMatrix = vec3(1.0, 0.0, 0.0);
const vec3 GrnMatrix = vec3(0.0, 1.0, 0.0);
const vec3 BluMatrix = vec3(0.0, 0.0, 1.0);
const vec3 DCOffset = vec3(0.0, 0.0, 0.0);
const vec3 ColorScale = vec3(0.95, 0.95, 0.95);
const float Saturation = 1.4;


const vec3 ConvergeX = vec3(- 0.4, 0.0, 0.2);
const vec3 ConvergeY = vec3(0.0, - 0.4, 0.2);
const vec3 RadialConvergeX = vec3(1.0, 1.0, 1.0);
const vec3 RadialConvergeY = vec3(1.0, 1.0, 1.0);


const float PincushionAmount = 0.015;
const float CurvatureAmount = 0.015;

const float ScanlineScale = 1.0;
const float ScanlineHeight = 1.0;
const float ScanlineBrightScale = 1.0;
const float ScanlineBrightOffset = 0.0;
const float ScanlineOffset = 0.0;
const vec3 Floor = vec3(0.05, 0.05, 0.05);


const float SixtyHertzRate =(60.0 / 59.97 - 1.0);
const float SixtyHertzScale = 0.1;
#line 33 "../../../slang-shaders/ntsc/shaders/mame-ntsc/mame-ntsc.slang"

layout(std140, set = 0, binding = 0)uniform UBO
{
 mat4 MVP;
} global;

#pragma stagevertex
layout(location = 0)in vec4 Position;
layout(location = 1)in vec2 TexCoord;
layout(location = 0)out vec2 vTexCoord;

void main()
{
   gl_Position = global . MVP * Position;
   vTexCoord = TexCoord;
}

#pragma stagefragment
layout(location = 0)in vec2 vTexCoord;
layout(location = 0)out vec4 FragColor;
layout(set = 0, binding = 2)uniform sampler2D Source;



vec4 CompositeSample(vec2 UV, vec2 InverseRes){
 vec2 InverseP = vec2(P, 0.0)* InverseRes;


 vec2 C0 = UV;
 vec2 C1 = UV + InverseP * 0.25;
 vec2 C2 = UV + InverseP * 0.50;
 vec2 C3 = UV + InverseP * 0.75;
 vec4 Cx = vec4(C0 . x, C1 . x, C2 . x, C3 . x);
 vec4 Cy = vec4(C0 . y, C1 . y, C2 . y, C3 . y);

 vec4 Texel0 = texture(Source, C0);
 vec4 Texel1 = texture(Source, C1);
 vec4 Texel2 = texture(Source, C2);
 vec4 Texel3 = texture(Source, C3);

 float Frequency = CCFrequency;



 vec4 T = A2 * Cy * vec4(params . SourceSize . y)+ B + Cx;
 vec4 W = vec4(Pi2ScanTime * Frequency);
 vec4 TW = T * W;
 vec4 Y = vec4(dot(Texel0, YTransform), dot(Texel1, YTransform), dot(Texel2, YTransform), dot(Texel3, YTransform));
 vec4 I = vec4(dot(Texel0, ITransform), dot(Texel1, ITransform), dot(Texel2, ITransform), dot(Texel3, ITransform));
 vec4 Q = vec4(dot(Texel0, QTransform), dot(Texel1, QTransform), dot(Texel2, QTransform), dot(Texel3, QTransform));

 vec4 Encoded = Y + I * cos(TW)+ Q * sin(TW);
 return(Encoded - MinC)* InvCRange;
}

vec4 NTSCCodec(vec2 UV, vec2 InverseRes)
{
 vec4 YAccum = Zero;
 vec4 IAccum = Zero;
 vec4 QAccum = Zero;
 float QuadXSize = params . SourceSize . x * 4.0;
 float TimePerSample = ScanTime / QuadXSize;






 float Fc_y1 = NotchLowerFrequency * TimePerSample;
 float Fc_y2 = NotchUpperFrequency * TimePerSample;
 float Fc_y3 = YFrequency * TimePerSample;
 float Fc_i = IFrequency * TimePerSample;
 float Fc_q = QFrequency * TimePerSample;
 float Pi2Fc_y1 = Fc_y1 * Pi2;
 float Pi2Fc_y2 = Fc_y2 * Pi2;
 float Pi2Fc_y3 = Fc_y3 * Pi2;
 float Pi2Fc_i = Fc_i * Pi2;
 float Pi2Fc_q = Fc_q * Pi2;
 float Fc_y1_2 = Fc_y1 * 2.0;
 float Fc_y2_2 = Fc_y2 * 2.0;
 float Fc_y3_2 = Fc_y3 * 2.0;
 float Fc_i_2 = Fc_i * 2.0;
 float Fc_q_2 = Fc_q * 2.0;
 vec4 CoordY = vec4(UV . y);


 for(float n = - 31.0;n < 32.0;n += 4.0)
 {
  vec4 n4 = n + NotchOffset;
  vec4 CoordX = UV . x + InverseRes . x * n4 * 0.25;
  vec2 TexCoord = vec2(CoordX . x, CoordY . x);
  vec4 C = CompositeSample(TexCoord, InverseRes)* CRange + MinC;
  vec4 WT = W *(CoordX + A2 * CoordY * params . SourceSize . y + B);
  vec4 Cosine = 0.54 + 0.46 * cos(Pi2Length * n4);

  vec4 SincYIn1 = Pi2Fc_y1 * n4;
  vec4 SincYIn2 = Pi2Fc_y2 * n4;
  vec4 SincYIn3 = Pi2Fc_y3 * n4;
  vec4 SincY1 = sin(SincYIn1)/ SincYIn1;
  vec4 SincY2 = sin(SincYIn2)/ SincYIn2;
  vec4 SincY3 = sin(SincYIn3)/ SincYIn3;



  if(SincYIn1 . x == 0.0)SincY1 . x = 1.0;
  if(SincYIn1 . y == 0.0)SincY1 . y = 1.0;
  if(SincYIn1 . z == 0.0)SincY1 . z = 1.0;
  if(SincYIn1 . w == 0.0)SincY1 . w = 1.0;
  if(SincYIn2 . x == 0.0)SincY2 . x = 1.0;
  if(SincYIn2 . y == 0.0)SincY2 . y = 1.0;
  if(SincYIn2 . z == 0.0)SincY2 . z = 1.0;
  if(SincYIn2 . w == 0.0)SincY2 . w = 1.0;
  if(SincYIn3 . x == 0.0)SincY3 . x = 1.0;
  if(SincYIn3 . y == 0.0)SincY3 . y = 1.0;
  if(SincYIn3 . z == 0.0)SincY3 . z = 1.0;
  if(SincYIn3 . w == 0.0)SincY3 . w = 1.0;
  vec4 IdealY =(Fc_y1_2 * SincY1 - Fc_y2_2 * SincY2)+ Fc_y3_2 * SincY3;
  vec4 FilterY = Cosine * IdealY;

  vec4 SincIIn = Pi2Fc_i * n4;
  vec4 SincI = sin(SincIIn)/ SincIIn;
  if(SincIIn . x == 0.0)SincI . x = 1.0;
  if(SincIIn . y == 0.0)SincI . y = 1.0;
  if(SincIIn . z == 0.0)SincI . z = 1.0;
  if(SincIIn . w == 0.0)SincI . w = 1.0;
  vec4 IdealI = Fc_i_2 * SincI;
  vec4 FilterI = Cosine * IdealI;

  vec4 SincQIn = Pi2Fc_q * n4;
  vec4 SincQ = sin(SincQIn)/ SincQIn;
  if(SincQIn . x == 0.0)SincQ . x = 1.0;
  if(SincQIn . y == 0.0)SincQ . y = 1.0;
  if(SincQIn . z == 0.0)SincQ . z = 1.0;
  if(SincQIn . w == 0.0)SincQ . w = 1.0;
  vec4 IdealQ = Fc_q_2 * SincQ;
  vec4 FilterQ = Cosine * IdealQ;

  YAccum += C * FilterY;
  IAccum += C * cos(WT)* FilterI;
  QAccum += C * sin(WT)* FilterQ;
 }

 float Y = dot(YAccum, One);
 float I = dot(IAccum, One)* 2.0;
 float Q = dot(QAccum, One)* 2.0;

 vec3 YIQ = vec3(Y, I, Q);
 vec3 OutRGB = vec3(dot(YIQ, YIQ2R), dot(YIQ, YIQ2G), dot(YIQ, YIQ2B));

 return vec4(OutRGB, 1.0);
}

void main()
{
   FragColor = vec4(NTSCCodec(vTexCoord, params . SourceSize . zw));
}
