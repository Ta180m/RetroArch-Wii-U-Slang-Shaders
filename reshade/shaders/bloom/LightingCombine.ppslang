#version 450
#extension GL_GOOGLE_include_directive : enable
#line 1 "../../../slang-shaders/reshade/shaders/bloom/LightingCombine.slang"


layout(push_constant)uniform Push
{
 vec4 SourceSize;
 vec4 OriginalSize;
 vec4 OutputSize;
 uint FrameCount;
} params;

#line 1 "../../../slang-shaders/reshade/shaders/bloom/params.inc"
layout(std140, set = 0, binding = 0)uniform UBO
{
   mat4 MVP;
   float iBloomMixmode;
   float fBloomThreshold;
   float fBloomAmount;
   float fBloomSaturation;
   float fBloomTint_r;
   float fBloomTint_g;
   float fBloomTint_b;
   float bLensdirtEnable;
   float iLensdirtMixmode;
   float fLensdirtIntensity;
   float fLensdirtSaturation;
   float fLensdirtTint_r;
   float fLensdirtTint_g;
   float fLensdirtTint_b;
   float bAnamFlareEnable;
   float fAnamFlareThreshold;
   float fAnamFlareWideness;
   float fAnamFlareAmount;
   float fAnamFlareCurve;
   float fAnamFlareColor_r;
   float fAnamFlareColor_g;
   float fAnamFlareColor_b;
   float bLenzEnable;
   float fLenzIntensity;
   float fLenzThreshold;
   float bChapFlareEnable;
   float fChapFlareThreshold;
   float iChapFlareCount;
   float fChapFlareDispersal;
   float fChapFlareSize;
   float fChapFlareCA_r;
   float fChapFlareCA_g;
   float fChapFlareCA_b;
   float fChapFlareIntensity;
   float bGodrayEnable;
   float fGodrayDecay;
   float fGodrayExposure;
   float fGodrayWeight;
   float fGodrayDensity;
   float fGodrayThreshold;
   float iGodraySamples;
   float fFlareLuminance;
   float fFlareBlur;
   float fFlareIntensity;
   float fFlareTint_r;
   float fFlareTint_g;
   float fFlareTint_b;
} global;

#pragma parameteriBloomMixmode¡0.00.02.01.0
#pragma parameterfBloomThreshold¡0.80.11.00.1
#pragma parameterfBloomAmount¡0.80.020.00.1
#pragma parameterfBloomSaturation¡0.80.02.00.1
#pragma parameterfBloomTint_r¡0.70.01.00.05
#pragma parameterfBloomTint_g¡0.80.01.00.05
#pragma parameterfBloomTint_b¡1.00.01.00.05
#pragma parameterbLensdirtEnable¡0.00.01.01.0
#pragma parameteriLensdirtMixmode¡0.00.03.01.0
#pragma parameterfLensdirtIntensity¡0.40.02.00.1
#pragma parameterfLensdirtSaturation¡2.00.02.00.1
#pragma parameterfLensdirtTint_r¡1.00.01.00.05
#pragma parameterfLensdirtTint_g¡1.00.01.00.05
#pragma parameterfLensdirtTint_b¡1.00.01.00.05
#pragma parameterbAnamFlareEnable¡0.00.01.01.0
#pragma parameterfAnamFlareThreshold¡0.90.11.00.1
#pragma parameterfAnamFlareWideness¡2.41.02.50.1
#pragma parameterfAnamFlareAmount¡14.51.020.00.5
#pragma parameterfAnamFlareCurve¡1.21.02.00.1
#pragma parameterfAnamFlareColor_r¡0.0120.01.00.01
#pragma parameterfAnamFlareColor_g¡0.3130.01.00.01
#pragma parameterfAnamFlareColor_b¡0.5880.01.00.01
#pragma parameterbLenzEnable¡0.00.01.01.0
#pragma parameterfLenzIntensity¡1.00.23.00.1
#pragma parameterfLenzThreshold¡0.80.61.00.1
#pragma parameterbChapFlareEnable¡0.00.01.01.0
#pragma parameterfChapFlareThreshold¡0.90.70.990.05
#pragma parameteriChapFlareCount¡15.01.020.01.0
#pragma parameterfChapFlareDispersal¡0.250.251.00.05
#pragma parameterfChapFlareSize¡0.450.20.80.05
#pragma parameterfChapFlareCA_r¡0.00.01.00.01
#pragma parameterfChapFlareCA_g¡0.010.01.00.01
#pragma parameterfChapFlareCA_b¡0.020.01.00.01
#pragma parameterfChapFlareIntensity¡100.05.0200.05.0
#pragma parameterbGodrayEnable¡0.00.01.01.0
#pragma parameterfGodrayDecay¡0.990.50.99990.05
#pragma parameterfGodrayExposure¡1.00.71.50.05
#pragma parameterfGodrayWeight¡1.250.81.70.05
#pragma parameterfGodrayDensity¡1.00.22.00.2
#pragma parameterfGodrayThreshold¡0.90.61.00.05
#pragma parameteriGodraySamples¡128.016.0256.016.0
#pragma parameterfFlareLuminance¡0.0950.01.00.005
#pragma parameterfFlareBlur¡200.01.010000.050.0
#pragma parameterfFlareIntensity¡2.070.25.00.1
#pragma parameterfFlareTint_r¡0.1370.01.00.05
#pragma parameterfFlareTint_g¡0.2160.01.00.05
#pragma parameterfFlareTint_b¡1.00.01.00.05

vec3 fFlareTint = vec3(global . fFlareTint_r, global . fFlareTint_g, global . fFlareTint_b);
vec3 fAnamFlareColor = vec3(global . fAnamFlareColor_r, global . fAnamFlareColor_g, global . fAnamFlareColor_b);
vec3 fLensdirtTint = vec3(global . fLensdirtTint_r, global . fLensdirtTint_g, global . fLensdirtTint_b);
vec3 fBloomTint = vec3(global . fBloomTint_r, global . fBloomTint_g, global . fBloomTint_b);
vec3 fChapFlareCA = vec3(global . fChapFlareCA_r, global . fChapFlareCA_g, global . fChapFlareCA_b);















#line 12 "../../../slang-shaders/reshade/shaders/bloom/LightingCombine.slang"

#pragma stagevertex
layout(location = 0)in vec4 Position;
layout(location = 1)in vec2 TexCoord;
layout(location = 0)out vec2 vTexCoord;

void main()
{
   gl_Position = global . MVP * Position;
   vTexCoord = TexCoord;
}

#pragma stagefragment
layout(location = 0)in vec2 vTexCoord;
layout(location = 0)out vec4 FragColor;
layout(set = 0, binding = 2)uniform sampler2D Source;
layout(set = 0, binding = 3)uniform sampler2D Original;
layout(set = 0, binding = 4)uniform sampler2D Bloom3;
layout(set = 0, binding = 5)uniform sampler2D Bloom5;
layout(set = 0, binding = 6)uniform sampler2D Dirt;
layout(set = 0, binding = 7)uniform sampler2D Sprite;
layout(set = 0, binding = 8)uniform sampler2D LensFlare1;

#line 1 "../../../slang-shaders/reshade/shaders/bloom/frag_funcs.inc"
vec4 GaussBlur22(vec2 coord, sampler2D tex, float mult, float lodlevel, bool isBlurVert)
{
   vec4 sum = vec4(0.);
   vec2 axis = isBlurVert ? vec2(0, 1): vec2(1, 0);

   const float weight[11]= {
      0.082607,
      0.080977,
      0.076276,
      0.069041,
      0.060049,
      0.050187,
      0.040306,
      0.031105,
      0.023066,
      0.016436,
      0.011254
   };

   for(int i = - 10;i < 11;i ++)
   {
      float currweight = weight[abs(i)];
      sum += textureLod(tex, vec2(coord . xy + axis . xy * float(i)*(vTexCoord . xy * params . SourceSize . zw)* mult), lodlevel)* currweight;
   }

   return sum;
}

vec3 GetDnB(sampler2D tex, vec2 coords)
{
   vec3 color = vec3(max(0, dot(textureLod(tex, vec2(coords . xy), 4.). rgb, vec3(0.333))- global . fChapFlareThreshold)* global . fChapFlareIntensity);






   return color;
}
vec3 GetDistortedTex(sampler2D tex, vec2 sample_center, vec2 sample_vector, vec3 distortion)
{
   vec2 final_vector = sample_center + sample_vector * min(min(distortion . r, distortion . g), distortion . b);

   if(final_vector . x > 1.0 || final_vector . y > 1.0 || final_vector . x < - 1.0 || final_vector . y < - 1.0)
      return vec3(0, 0, 0);
   else
      return vec3(
         GetDnB(tex, sample_center + sample_vector * distortion . r). r,
         GetDnB(tex, sample_center + sample_vector * distortion . g). g,
         GetDnB(tex, sample_center + sample_vector * distortion . b). b);
}

vec3 GetBrightPass(vec2 coords)
{
   vec3 c = texture(Original, coords). rgb;
   vec3 bC = max(c - global . fFlareLuminance . xxx, 0.0);
   float bright = dot(bC, vec3(1.0));
   bright = smoothstep(0.0f, 0.5, bright);
   vec3 result = mix(vec3(0.0), c, vec3(bright));







   return result;
}
vec3 GetAnamorphicSample(int axis, vec2 coords, float blur)
{
   coords = 2.0 * coords - 1.0;
   coords . x /= - blur;
   coords = 0.5 * coords + 0.5;
   return GetBrightPass(coords);
}
#line 36 "../../../slang-shaders/reshade/shaders/bloom/LightingCombine.slang"



void main()
{
   vec4 color = vec4(0.);
   color = texture(Original, vTexCoord . xy);


   vec3 colorbloom = vec3(0.);
   colorbloom += texture(Bloom3, vTexCoord . xy). rgb * 1.0;
   colorbloom += texture(Bloom5, vTexCoord . xy). rgb * 9.0;
   colorbloom *= 0.1;
   colorbloom = clamp(colorbloom, 0., 1.);
   float colorbloomgray = dot(colorbloom, vec3(0.333));
   colorbloom = mix(vec3(colorbloomgray), colorbloom, vec3(global . fBloomSaturation));
   colorbloom *= fBloomTint;

   if(global . iBloomMixmode == 0.)
      color . rgb += colorbloom;
   else if(global . iBloomMixmode == 1.)
      color . rgb = 1. -(1. - color . rgb)*(1. - colorbloom);
   else if(global . iBloomMixmode == 2.)
      color . rgb = max(vec3(0.0), max(color . rgb, mix(color . rgb,(1. -(1. - clamp(colorbloom, 0., 1.))*(1. - clamp(colorbloom, 0., 1.))), 1.0)));
   else if(global . iBloomMixmode == 3.)
      color . rgb = max(color . rgb, colorbloom);


   if(global . bAnamFlareEnable > 0.5)
   {
      vec3 anamflare = texture(Bloom5, vTexCoord . xy). w * 2. * fAnamFlareColor;
      anamflare = max(anamflare, 0.0);
      color . rgb += pow(anamflare, vec3(1.0 / global . fAnamFlareCurve));
   }


   if(global . bLensdirtEnable > 0.5)
   {
      float lensdirtmult = dot(texture(Bloom5, vTexCoord). rgb, vec3(0.333));
      vec3 dirttex = texture(Dirt, vTexCoord). rgb;
      vec3 lensdirt = dirttex * lensdirtmult * global . fLensdirtIntensity;

      lensdirt = mix(vec3(dot(lensdirt . xyz, vec3(0.333))), lensdirt . xyz, vec3(global . fLensdirtSaturation));

      if(global . iLensdirtMixmode == 0.)
         color . rgb += lensdirt;
      else if(global . iLensdirtMixmode == 1.)
         color . rgb = 1. -(1. - color . rgb)*(1. - lensdirt);
      else if(global . iLensdirtMixmode == 2.)
         color . rgb = max(vec3(0.0), max(color . rgb, mix(color . rgb,(1. -(1. - clamp(lensdirt, 0., 1.))*(1. - clamp(lensdirt, 0., 1.))), 1.0)));
      else if(global . iLensdirtMixmode == 3.)
         color . rgb = max(color . rgb, lensdirt);
   }


   if(global . bAnamFlareEnable > 0.5 || global . bLenzEnable > 0.5 || global . bGodrayEnable > 0.5 || global . bChapFlareEnable > 0.5)
   {
      vec3 lensflareSample = texture(LensFlare1, vTexCoord . xy). rgb, lensflareMask;
      lensflareMask = texture(Sprite, vTexCoord + vec2(0.5, 0.5)*(vTexCoord . xy * params . SourceSize . zw)). rgb;
      lensflareMask += texture(Sprite, vTexCoord + vec2(- 0.5, 0.5)*(vTexCoord . xy * params . SourceSize . zw)). rgb;
      lensflareMask += texture(Sprite, vTexCoord + vec2(0.5, - 0.5)*(vTexCoord . xy * params . SourceSize . zw)). rgb;
      lensflareMask += texture(Sprite, vTexCoord + vec2(- 0.5, - 0.5)*(vTexCoord . xy * params . SourceSize . zw)). rgb;

      color . rgb += lensflareMask * 0.25 * lensflareSample;
   }
   FragColor = color;
}
