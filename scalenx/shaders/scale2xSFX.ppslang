#version 450












layout(push_constant)uniform Push
{
 vec4 SourceSize;
 vec4 OriginalSize;
 vec4 OutputSize;
 uint FrameCount;
 float YTR;
 float UTR;
 float VTR;
} params;

#pragma parameterYTR¡48.00.0255.01.0
#pragma parameterUTR¡7.00.0255.01.0
#pragma parameterVTR¡6.00.0255.01.0





layout(std140, set = 0, binding = 0)uniform UBO
{
 mat4 MVP;
} global;























const mat3x3 YUV = mat3x3(0.299, - 0.168736, 0.5, 0.587, - 0.331264, - 0.418688, 0.114, 0.5, - 0.081312);
     vec3 thresh = vec3(params . YTR, params . UTR, params . VTR)/ 255.0;

bool eq(vec3 A, vec3 B){
 return(A == B);
}

bool neq(vec3 A, vec3 B){
 return(A != B);
}

#pragma stagevertex
layout(location = 0)in vec4 Position;
layout(location = 1)in vec2 TexCoord;
layout(location = 0)out vec2 texCoord;
layout(location = 1)out vec4 t1;
layout(location = 2)out vec4 t2;
layout(location = 3)out vec4 t3;
layout(location = 4)out vec4 t4;
layout(location = 5)out vec4 t5;

void main()
{
   gl_Position = global . MVP * Position;
   texCoord = TexCoord;

         vec2 ps = vec2(params . SourceSize . z, params . SourceSize . w);
 float dx = ps . x;
 float dy = ps . y;

 t1 = texCoord . xxxy + vec4(- dx, 0, dx, - dy);
 t2 = texCoord . xxxy + vec4(- dx, 0, dx, 0);
 t3 = texCoord . xxxy + vec4(- dx, 0, dx, dy);
 t4 = texCoord . xyxy + vec4(0, - 2 * dy, - 2 * dx, 0);
 t5 = texCoord . xyxy + vec4(2 * dx, 0, 0, 2 * dy);
}

#pragma stagefragment
layout(location = 0)in vec2 texCoord;
layout(location = 1)in vec4 t1;
layout(location = 2)in vec4 t2;
layout(location = 3)in vec4 t3;
layout(location = 4)in vec4 t4;
layout(location = 5)in vec4 t5;
layout(location = 0)out vec4 FragColor;
layout(set = 0, binding = 2)uniform sampler2D Source;

void main()
{

      vec2 fp = floor(2.0 * fract(texCoord * params . SourceSize . xy));










      vec3 b = texture(Source, t1 . yw). xyz;
      vec3 d = texture(Source, t2 . xw). xyz;
      vec3 e = texture(Source, t2 . yw). xyz;
      vec3 f = texture(Source, t2 . zw). xyz;
      vec3 h = texture(Source, t3 . yw). xyz;

        mat4x3 tmp =(YUV * mat4x3(b, d, e, f));
      vec3 B = tmp[0], D = tmp[1], E = tmp[2], F = tmp[3], H =(YUV * h);

      vec3 A = texture(Source, t1 . xw). xyz;
      vec3 C = texture(Source, t1 . zw). xyz;
      vec3 G = texture(Source, t3 . xw). xyz;
      vec3 I = texture(Source, t3 . zw). xyz;

 tmp =(YUV * mat4x3(A, C, G, I));
 A = tmp[0], C = tmp[1], G = tmp[2], I = tmp[3];

      vec3 J = texture(Source, t4 . xy). xyz;
      vec3 K = texture(Source, t4 . zw). xyz;
      vec3 L = texture(Source, t5 . xy). xyz;
      vec3 M = texture(Source, t5 . zw). xyz;

 tmp =(YUV * mat4x3(J, K, L, M));
 J = tmp[0], K = tmp[1], L = tmp[2], M = tmp[3];




 bool par0 = neq(B, F)&& neq(D, H);
 bool par1 = neq(B, D)&& neq(F, H);


 bool AE = eq(A, E), CE = eq(C, E), EG = eq(E, G), EI = eq(E, I);


 bool art0 = CE || EG;
 bool art1 = AE || EI;




      vec3 E0 = eq(B, D)&& par0 &&(! AE || art0 || eq(A, J)|| eq(A, K))? 0.5 *(b + d): e;
      vec3 E1 = eq(B, F)&& par1 &&(! CE || art1 || eq(C, J)|| eq(C, L))? 0.5 *(b + f): e;
      vec3 E2 = eq(D, H)&& par1 &&(! EG || art1 || eq(G, K)|| eq(G, M))? 0.5 *(h + d): e;
      vec3 E3 = eq(F, H)&& par0 &&(! EI || art0 || eq(I, L)|| eq(I, M))? 0.5 *(h + f): e;


 FragColor = vec4(fp . y == 0 ?(fp . x == 0 ? E0 : E1):(fp . x == 0 ? E2 : E3), 1.0);
}
